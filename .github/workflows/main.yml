name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CONDITION_SKIP: ${{ contains(join(github.event.commits.*.message, ' '), '#skip') }}
  CONDITION_PUSH: ${{ github.event_name == 'push' }}

jobs:
  frontend-ci:
    runs-on: ubuntu-latest
    outputs:
      author: ${{ steps.get_author.outputs.author }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get last commit author
        id: get_author
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
        #   cache: 'npm'
        #   cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install --include=dev

      - name: Run frontend lint
        working-directory: frontend
        run: npm run lint

    #   - name: Run frontend tests
    #     working-directory: frontend
    #     run: npm test

  backend-ci:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
        #   cache: 'npm'
        #   cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm install --include=dev

      - name: Run backend lint
        working-directory: backend
        run: npm run lint

    #   - name: Run backend tests
    #     working-directory: backend
    #     run: npm test
    #     env:
    #       NODE_ENV: test
    #       DB_HOST: localhost
    #       DB_PORT: 5432
    #       DB_USER: test_user
    #       DB_PASSWORD: test_password
    #       DB_NAME: test_db
    #       DB_TEST_USER: test_user
    #       DB_TEST_PASSWORD: test_password
    #       DB_TEST_NAME: test_db
    #       JWT_TEST_SECRET: test-secret
    #       JWT_TEST_PREVIOUS_SECRET: old-secret
    #       CSRF_SECRET: test-csrf-secret
    #       SESSION_SECRET: test-session-secret

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [frontend-ci, backend-ci]
#     if: github.ref == 'refs/heads/main'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '22'

#       - name: prepare dist
#         working-directory: frontend
#         run: npm install --include=dev && npm run build && cp -r dist ../backend

#       - name: Trigger deployment
#         id: deploy
#         if: ${{ env.CONDITION_PUSH == 'true' && env.CONDITION_SKIP == 'false' }}
#         run: curl https://api.render.com/deploy/srv-${{ secrets.MY_RENDER_SERVICE_ID }}?key=${{ secrets.MY_RENDER_API_KEY }}

    #   - name: Install Render CLI
    #     run: npm install -g @renderinc/cli

    #   - name: Deploy to Render
    #     env:
    #       RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    #     run: |
    #       render deploy --confirm
